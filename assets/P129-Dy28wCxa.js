import{j as a}from"./index-Dat4Qq1i.js";import{C as r}from"./Common-Ce9A9Jt2.js";function n({title:e}){const t=[{title:e,link:"https://javascript.info/comparison",details:[{detail:["We know many comparison operators from maths. In JavaScript they are written like this:","üí† Greater/less than: a > b, a < b.","üí† Greater/less than or equals: a >= b, a <= b.","üí† Equals: a == b, please note the double equality sign == means the equality test, while a single one a = b means an assignment.","üí† Not equals: In maths the notation is ‚â†, but in JavaScript it‚Äôs written as a != b."]}]},{title:"Boolean is the result",link:"https://javascript.info/comparison#boolean-is-the-result",details:[{detail:['All comparison operators return a boolean value: "true" or "false". For example:'],code:["alert( 2 > 1 ); // true (correct)","alert( 2 == 1 ); // false (wrong)","alert( 2 != 1 ); // true (correct)"]},{detail:["A comparison result can be assigned to a variable, just like any value:"],code:["let result = 5 > 4; // assign the result of the comparison","alert( result ); // true"]}]},{title:"String comparison",link:"https://javascript.info/comparison#string-comparison",details:[{detail:["To see whether a string is greater than another, JavaScript uses the so-called ‚Äúdictionary‚Äù or ‚Äúlexicographical‚Äù order. In other words, strings are compared letter-by-letter. For example:"],code:["alert( 'Z' > 'A' ); // true","alert( 'Glow' > 'Glee' ); // true","alert( 'Bee' > 'Be' ); // true"]},{detail:["The algorithm to compare two strings is simple:","üí† Compare the first character of both strings.","üí† If the first character from the first string is greater (or less) than the other string‚Äôs, then the first string is greater (or less) than the second. We‚Äôre done.","üí† Otherwise, if both strings‚Äô first characters are the same, compare the second characters the same way.","üí† Repeat until the end of either string.","üí† If both strings end at the same length, then they are equal. Otherwise, the longer string is greater."],important:[{title:"Not a real dictionary, but Unicode order",details:[{detail:["The comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it‚Äôs not exactly the same.",'For instance, case matters. A capital letter "A" is not equal to the lowercase "a". Which one is greater? The lowercase "a". Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We‚Äôll get back to specific details and consequences of this in the chapter Strings.']}]}]}]},{title:"Comparison of different types",link:"https://javascript.info/comparison#comparison-of-different-types",details:[{detail:["When comparing values of different types, JavaScript converts the values to numbers. For example:"],code:["alert( '2' > 1 ); // true, string '2' becomes a number 2","alert( '01' == 1 ); // true, string '01' becomes a number 1"]},{detail:["For boolean values, true becomes 1 and false becomes 0. For example:"],code:["alert( true == 1 ); // true","alert( false == 0 ); // true"],important:[{title:"A funny consequence",details:[{detail:["It is possible that at the same time:","üí† Two values are equal.","üí† One of them is true as a boolean and the other one is false as a boolean."],code:["let a = 0;","alert( Boolean(a) ); // false","",'let b = "0";',"alert( Boolean(b) ); // true","","alert(a == b); // true!"]},{detail:['From JavaScript‚Äôs standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence "0" becomes 0), while the explicit Boolean conversion uses another set of rules.']}]}]}]},{title:"Strict equality",link:"https://javascript.info/comparison#strict-equality",details:[{detail:["A regular equality check == has a problem. It cannot differentiate 0 from false. The same thing happens with an empty string:"],code:["alert( 0 == false ); // true","alert( '' == false ); // true"]},{detail:["This happens because operands of different types are converted to numbers by the equality operator ==. An empty string, just like false, becomes a zero.","What to do if we‚Äôd like to differentiate 0 from false?","A strict equality operator === checks the equality without type conversion.","In other words, if a and b are of different types, then a === b immediately returns false without an attempt to convert them."],code:["alert( 0 === false ); // false, because the types are different"]},{detail:["There is also a ‚Äústrict non-equality‚Äù operator !== analogous to !=.","The strict equality operator is a bit longer to write, but makes it obvious what‚Äôs going on and leaves less room for errors."]}]},{title:"Comparison with null and undefined",link:"https://javascript.info/comparison#comparison-with-null-and-undefined",details:[{detail:["For a non-strict check ==","These two are a ‚Äúsweet couple‚Äù: they equal each other (in the sense of ==), but not any other value."],code:["alert( null == undefined ); // true"]},{detail:["For maths and other comparisons < > <= >=","null/undefined are converted to numbers: null becomes 0, while undefined becomes NaN."]}]},{title:"Strange result: null vs 0",link:"https://javascript.info/comparison#strange-result-null-vs-0",details:[{detail:["Let‚Äôs compare null with a zero:"],code:["alert( null > 0 );  // (1) false","alert( null == 0 ); // (2) false","alert( null >= 0 ); // (3) true"]},{detail:["Mathematically, that‚Äôs strange. The last result states that ‚Äúnull is greater than or equal to zero‚Äù, so in one of the comparisons above it must be true, but they are both false.","The reason is that an equality check == and comparisons > < >= <= work differently. Comparisons convert null to a number, treating it as 0. That‚Äôs why (3) null >= 0 is true and (1) null > 0 is false.","On the other hand, the equality check == for undefined and null is defined such that, without any conversions, they equal each other and don‚Äôt equal anything else. That‚Äôs why (2) null == 0 is false."]}]},{title:"An incomparable undefined",link:"https://javascript.info/comparison#an-incomparable-undefined",details:[{detail:["The value undefined shouldn‚Äôt be compared to other values:"],code:["alert( undefined > 0 ); // false (1)","alert( undefined < 0 ); // false (2)","alert( undefined == 0 ); // false (3)"]},{detail:["Why does it dislike zero so much? Always false!","üí† Comparisons (1) and (2) return false because undefined gets converted to NaN and NaN is a special numeric value which returns false for all comparisons.","üí† The equality check (3) returns false because undefined only equals null, undefined, and no other value."]}]},{title:"Avoid problems",link:"https://javascript.info/comparison#avoid-problems",details:[{detail:["Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there‚Äôs a solid way to avoid problems with them:","üí† Treat any comparison with undefined/null except the strict equality === with exceptional care.","üí† Don‚Äôt use comparisons >= > < <= with a variable which may be null/undefined, unless you‚Äôre really sure of what you‚Äôre doing. If a variable can have these values, check for them separately."]}]},{title:"Summary",link:"https://javascript.info/comparison#summary",details:[{detail:["üí† Comparison operators return a boolean value.","üí† Strings are compared letter-by-letter in the ‚Äúdictionary‚Äù order.","üí† When values of different types are compared, they get converted to numbers (with the exclusion of a strict equality check).","üí† The values null and undefined equal == each other and do not equal any other value.","üí† Be careful when using comparisons like > or < with variables that can occasionally be null/undefined. Checking for null/undefined separately is a good idea."]}]},{title:"Tasks",link:"https://javascript.info/comparison#tasks"},{title:"Comparisons",link:"https://javascript.info/comparison#comparisons",details:[{detail:["What will be the result for these expressions?"],code:["alert(5 > 4); // true",'alert("apple" > "pineapple"); // false','alert("2" > "12"); // true',"alert(undefined == null); // true","alert(undefined === null); // false",'alert(null == "\\n0\\n"); // false','alert(null === +"\\n0\\n"); // false']}]}];return a.jsx(r,{data:t})}export{n as default};
